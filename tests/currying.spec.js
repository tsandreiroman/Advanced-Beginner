import { expect } from 'chai';
import {
  doBasicCurry,
  shouldPair,
  generateCorrectPair,
  generateWrongPair,
  songsGenerator
} from '@app/currying';

const songs = [
  {
    name: 'They don\'t care',
    artist: 'Michael',
    complete: false
  },
  {
    name: 'about us',
    artist: 'Jackson',
    complete: false
  },
  {
    name: 'Smooth Criminal',
    artist: 'Michael Jackson',
    complete: true
  },
];

describe('>>> currying.js <<<', () => {
  it("Should curry the received function until it receives all the arguments", async () => {
    const curryMe = (a, b, c) => a + b + c;

    const first = Math.random(), second = Math.random(), third = Math.random();
    let result;

    result = doBasicCurry(curryMe)(first);
    expect(typeof result).to.equal('function');
    expect(result.length).to.equal(1);
  
    result = doBasicCurry(curryMe)(first)(second);
    expect(typeof result).to.equal('function');
    expect(result.length).to.equal(1);

    result = doBasicCurry(curryMe)(first)(second)(third);
    expect(typeof result).to.equal('number');
    expect(result).to.equal(curryMe(first, second, third));
  });

  it("Should return the song & artist names out of the merged received objects", async () => {
    const firstPart = songs[0];
    const secondPart = songs[1];
    const expectedName = 'They don\'t care about us';
    const expectedArtist = 'Michael Jackson';

    const pairDecisionMake = songsGenerator({ shouldPair, generateCorrectPair, generateWrongPair });
    const generateSong = pairDecisionMake(firstPart, secondPart);

    expect(generateSong.name).to.equal(expectedName);
    expect(generateSong.artist).to.equal(expectedArtist);
  });

  it("Should return the the error generated by wrong pair", async () => {
    const firstPart = songs[0];
    const secondPart = songs[2];
    const expectedName = 'They don\'t care Smooth Criminal';
    const expectedArtist = 'Michael Michael Jackson';
    const expectedError = `${expectedArtist} - ${expectedName} is not an existing song`

    const pairDecisionMake = songsGenerator({ shouldPair, generateCorrectPair, generateWrongPair });
    const generateSong = pairDecisionMake(firstPart, secondPart);

    expect(generateSong).to.deep.equal(expectedError);
  });
});
